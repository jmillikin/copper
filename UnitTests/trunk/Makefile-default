CXX=g++

SONAME=libunar.so.1

# For the default output handler
SO_CXXFLAGS=-Wall -Wextra -g3 -O0 -fpic -fvisibility=hidden -fno-rtti -fno-exceptions -DNO_EXCEPTIONS
SO_LFLAGS=-shared

CXXFLAGS=-Wall -Wextra -g3 -O0 -fvisibility=hidden -fno-rtti -fno-exceptions -DNO_EXCEPTIONS
LFLAGS=-L. -lunar

# For the QT 4 output handler
#QT_CXXFLAGS=`pkg-config --cflags QtGui_debug QtCore_debug`
#QT_LFLAGS=`pkg-config --libs QtGui_debug QtCore_debug`
#QT_OBJECTS=build/qt4_output_handler.o build/qt4_output_handler.moc.o

# For the GTK+ output handler
#GTK_CXXFLAGS=`pkg-config --cflags gtk+-2.0`
#GTK_LFLAGS=`pkg-config --libs gtk+-2.0 gthread-2.0`
#GTK_OBJECTS=build/gtk_output_handler.o

RM=rm -f

SO_OBJECTS=\
  $(GTK_OBJECTS) \
  $(QT_OBJECTS) \
  build/assertion.o \
  build/assertions.o \
  build/assertion_result.o \
  build/default_output_handler.o \
  build/error.o \
  build/exception_protector.o \
  build/fixture.o \
  build/output_handler.o \
  build/protector.o \
  build/suite.o \
  build/test.o \
  build/unix_protector.o

OBJECTS= \
  build/self_tests.o \
  build/main.o

all: $(SONAME) build tests

$(SONAME): $(SO_OBJECTS)
	$(CXX) $(SO_LFLAGS) $(QT_LFLAGS) $(SO_OBJECTS) -o $@

build/assertion.o: assertion.cpp
	$(CXX) $(SO_CXXFLAGS) -c $? -o $@

build/assertions.o: assertions.cpp
	$(CXX) $(SO_CXXFLAGS) -c $? -o $@

build/assertion_result.o: assertion_result.cpp
	$(CXX) $(SO_CXXFLAGS) -c $? -o $@

build/default_output_handler.o: output_handlers/default_output_handler.cpp
	$(CXX) $(SO_CXXFLAGS) -c $? -o $@

build/error.o: error.cpp
	$(CXX) $(SO_CXXFLAGS) -c $? -o $@

build/exception_protector.o: protectors/exception_protector.cpp
	$(CXX) $(SO_CXXFLAGS) -c $? -o $@

build/fixture.o: fixture.cpp
	$(CXX) $(SO_CXXFLAGS) -c $? -o $@

build/main.o: main.cpp
	$(CXX) $(CXXFLAGS) $(QT_CXXFLAGS) $(GTK_CXXFLAGS) -c $? -o $@

build/qt4_output_handler.o: output_handlers/qt4_output_handler.cpp
	$(CXX) $(SO_CXXFLAGS) $(QT_CXXFLAGS) -c $? -o $@

build/qt4_output_handler.moc.o: qt4_output_handler.moc.cpp
	$(CXX) $(SO_CXXFLAGS) $(QT_CXXFLAGS) -c $? -o $@

qt4_output_handler.moc.cpp: output_handlers/qt4_output_handler.hpp
	moc-qt4 $? > $@

build/gtk_output_handler.o: output_handlers/gtk_output_handler.cpp
	$(CXX) $(SO_CXXFLAGS) $(GTK_CXXFLAGS) -c $? -o $@

build/output_handler.o: output_handler.cpp
	$(CXX) $(SO_CXXFLAGS) -c $? -o $@

build/protector.o: protector.cpp
	$(CXX) $(SO_CXXFLAGS) -c $? -o $@

build/sample_suite.o: sample_suite.cpp
	$(CXX) $(CXXFLAGS) -c $? -o $@

build/self_tests.o: self_tests.cpp
	$(CXX) $(CXXFLAGS) -c $? -o $@

build/suite.o: suite.cpp
	$(CXX) $(SO_CXXFLAGS) -c $? -o $@

build/test.o: test.cpp
	$(CXX) $(SO_CXXFLAGS) -c $? -o $@

build/unix_protector.o: protectors/unix_protector.cpp
	$(CXX) $(SO_CXXFLAGS) -c $? -o $@

tests: $(OBJECTS)
	$(CXX) $(LFLAGS) $(GTK_LFLAGS) $(QT_LFLAGS) $(OBJECTS) -o $@

build:
	@mkdir -p build

clean:
	$(RM) $(SONAME) $(SO_OBJECTS) $(OBJECTS) $(QT_OBJECTS) $(GTK_OBJECTS)
